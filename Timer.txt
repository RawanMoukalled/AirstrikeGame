********** TIMER CODE ************
void configureTimer1A(uint16_t period0){
  ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER1); // Enable Timer 0 Clock
  ROM_IntMasterEnable(); // Enable Interrupts
  ROM_TimerConfigure(TIMER1_BASE, TIMER_CFG_PERIODIC); // Configure Timer Operation as Periodic
  
  // Configure Timer Frequency
  // Frequency is given by MasterClock / CustomValue
  // Examples: 120MHz / 120k = 1000 kHz ; 120MHz / 120M = 1 Hz
  ROM_TimerLoadSet(TIMER1_BASE, TIMER_A, SysCtlClockGet()/period0);
  Serial.println(SysCtlClockGet()); 
  TimerIntRegister(TIMER1_BASE, TIMER_A, &Timer1IntHandler);
  ROM_IntEnable(INT_TIMER1A);  // Enable Timer 0A Interrupt
  ROM_TimerIntEnable(TIMER1_BASE, TIMER_TIMA_TIMEOUT); // Timer 0A Interrupt when Timeout
  ROM_TimerEnable(TIMER1_BASE, TIMER_A); // Start Timer 0A
}

*****************************************

. The SysCtlClockGet() returns 80MHz, which is the clock frequency at the output of the port.
. When calling the Timer function, the number of cycles is indicated in the variable period0. The maximum number of cycles that the timer can accept is 2^16 - 1 = 65535.
. We specified the number of cycles to be 50000 (i.e: configureTimer1A(50000) );
. Hence the time needed to perform the 50000 cycles is: 50000*1/80M = 50000*12.5n = 1/1600.
. If the total time needed is 1s, then we need to loop 1600 times.